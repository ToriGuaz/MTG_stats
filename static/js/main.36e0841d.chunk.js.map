{"version":3,"sources":["firebaseConfig.js","LandingPage.jsx","Usuario.jsx","Oponente.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","getApps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","LandingPage","_ref","onJoinGame","nombre","setNombre","useState","nombrePartida","setNombrePartida","games","setGames","useEffect","gamesRef","ref","onValue","snapshot","data","val","gamesList","Object","keys","map","key","React","createElement","type","value","onChange","e","target","placeholder","onClick","handleCreateGame","set","jugadores","vida","handleJoinGame","game","join","Usuario","userId","setVida","vidaRef","vidaValue","actualizarVidaEnDB","nuevaVida","className","aumentarVida","disminuirVida","aumentarVida5","disminuirVida5","Oponente","oponenteId","App","gameData","setGameData","nombreJugador","setNombreJugador","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.36e0841d.chunk.js","sourcesContent":["import { initializeApp, getApps } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\r\nconst db = getDatabase(app);\r\n\r\nexport { app, db };","import React, { useState, useEffect } from 'react';\r\nimport { db } from './firebaseConfig';\r\nimport { ref, set, onValue } from 'firebase/database';\r\n\r\nconst LandingPage = ({ onJoinGame }) => {\r\n  const [nombre, setNombre] = useState('');\r\n  const [nombrePartida, setNombrePartida] = useState('');\r\n  const [games, setGames] = useState([]);\r\n\r\n  // Cargar partidas existentes\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games/');\r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      const gamesList = data ? Object.keys(data).map(key => ({ nombre: key, ...data[key] })) : [];\r\n      setGames(gamesList);\r\n    });\r\n  }, []);\r\n\r\n  const handleJoinGame = () => {\r\n    if (nombre && nombrePartida) {\r\n      // Aquí puedes manejar la lógica para unirse a un juego\r\n      onJoinGame(nombre, nombrePartida);\r\n    }\r\n  };\r\n\r\n  const handleCreateGame = () => {\r\n    if (nombre && nombrePartida) {\r\n      set(ref(db, `games/${nombrePartida}`), {\r\n        jugadores: {\r\n          [nombre]: { nombre, vida: 40 },\r\n        },\r\n      });\r\n      onJoinGame(nombre, nombrePartida);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Magic: The Gathering - Landing Page</h1>\r\n      <input\r\n        type=\"text\"\r\n        value={nombre}\r\n        onChange={(e) => setNombre(e.target.value)}\r\n        placeholder=\"Ingresa tu nombre\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        value={nombrePartida}\r\n        onChange={(e) => setNombrePartida(e.target.value)}\r\n        placeholder=\"Ingresa el nombre de la partida\"\r\n      />\r\n      <button onClick={handleCreateGame}>Crear Partida</button>\r\n\r\n      <h2>Unirse a una Partida Existente</h2>\r\n      <button onClick={handleJoinGame}>Unirse</button>\r\n\r\n      <h2>Partidas Existentes</h2>\r\n      <ul>\r\n        {games.map((game) => (\r\n          <li key={game.nombre}>\r\n            {game.nombre} - {game.jugadores ? Object.keys(game.jugadores).join(', ') : 'No hay jugadores'}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { db } from './firebaseConfig'; // Asegúrate de importar db\r\nimport { ref, onValue, set } from 'firebase/database';\r\nimport './Usuario.css';\r\n\r\nconst Usuario = ({ userId }) => {\r\n  const [vida, setVida] = useState(40);\r\n  const nombre = 'Toribia';\r\n\r\n  // Cargar la vida desde la base de datos al iniciar\r\n  useEffect(() => {\r\n    const vidaRef = ref(db, `users/${userId}/vida`);\r\n    onValue(vidaRef, (snapshot) => {\r\n      const vidaValue = snapshot.val();\r\n      if (vidaValue !== null) {\r\n        setVida(vidaValue);\r\n      }\r\n    });\r\n  }, [userId]);\r\n\r\n  // Actualizar vida en la base de datos\r\n  const actualizarVidaEnDB = (nuevaVida) => {\r\n    set(ref(db, `users/${userId}/vida`), nuevaVida);\r\n  };\r\n\r\n  const aumentarVida = () => {\r\n    const nuevaVida = vida + 1;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const disminuirVida = () => {\r\n    const nuevaVida = vida - 1;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const aumentarVida5 = () => {\r\n    const nuevaVida = vida + 5;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const disminuirVida5 = () => {\r\n    const nuevaVida = vida - 5;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contenedorUsuario\">\r\n      <h1>{nombre}</h1>\r\n      <h2>Vida: {vida}</h2>\r\n      <div>\r\n        <button className=\"buttonStyle\" onClick={aumentarVida}>+</button>\r\n        <button className=\"buttonStyle\" onClick={disminuirVida}>-</button>\r\n        <button className=\"buttonStyle\" onClick={aumentarVida5}>+5</button>\r\n        <button className=\"buttonStyle\" onClick={disminuirVida5}>-5</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Usuario;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { db } from './firebaseConfig'; // Asegúrate de importar db\r\nimport { ref, onValue, set } from 'firebase/database';\r\nimport './Oponente.css';\r\n\r\nconst Oponente = ({ oponenteId }) => {\r\n  const [vida, setVida] = useState(40); // La vida comienza en 40\r\n  const nombre = 'Oponente'; // Cambia esto si necesitas que sea dinámico\r\n\r\n  // Cargar la vida del oponente desde la base de datos al iniciar\r\n  useEffect(() => {\r\n    const vidaRef = ref(db, `oponentes/${oponenteId}/vida`);\r\n    onValue(vidaRef, (snapshot) => {\r\n      const vidaValue = snapshot.val();\r\n      if (vidaValue !== null) {\r\n        setVida(vidaValue);\r\n      }\r\n    });\r\n  }, [oponenteId]);\r\n\r\n  // Actualizar vida en la base de datos\r\n  const actualizarVidaEnDB = (nuevaVida) => {\r\n    set(ref(db, `oponentes/${oponenteId}/vida`), nuevaVida);\r\n  };\r\n\r\n  const aumentarVida = () => {\r\n    const nuevaVida = vida + 1;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const disminuirVida = () => {\r\n    const nuevaVida = vida - 1;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const aumentarVida5 = () => {\r\n    const nuevaVida = vida + 5;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  const disminuirVida5 = () => {\r\n    const nuevaVida = vida - 5;\r\n    setVida(nuevaVida);\r\n    actualizarVidaEnDB(nuevaVida);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contenedorOponente\">\r\n      <h1>{nombre}</h1>\r\n      <h2>Vida: {vida}</h2>\r\n      {/*<div>\r\n        <button className=\"buttonStyle\" onClick={aumentarVida}>+</button>\r\n        <button className=\"buttonStyle\" onClick={disminuirVida}>-</button>\r\n        <button className=\"buttonStyle\" onClick={aumentarVida5}>+5</button>\r\n        <button className=\"buttonStyle\" onClick={disminuirVida5}>-5</button>\r\n      </div>*/}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Oponente;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport LandingPage from './LandingPage';\r\nimport Usuario from './Usuario';\r\nimport Oponente from './Oponente';\r\n\r\nfunction App() {\r\n  const [gameData, setGameData] = useState(null); // Para almacenar la información del juego\r\n  const [nombreJugador, setNombreJugador] = useState('');\r\n\r\n  const handleJoinGame = (nombre, nombrePartida) => {\r\n    setNombreJugador(nombre);\r\n    setGameData({ nombrePartida, nombreJugador }); // Aquí podrías almacenar más información si es necesario\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {gameData ? (\r\n          <div>\r\n            <Usuario nombre={nombreJugador} />\r\n            <Oponente oponenteId=\"jugador2\" /> {/* Cambia esto según tu lógica */}\r\n          </div>\r\n        ) : (\r\n          <LandingPage onJoinGame={handleJoinGame} />\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}