{"version":3,"sources":["firebaseConfig.js","Componets/GameForm.jsx","Componets/LandingPage.jsx","Componets/PrincipalPlayer.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","GameForm","_ref","onGameSelect","games","setGames","useState","useEffect","gamesRef","ref","onValue","snapshot","data","val","gameArray","Object","keys","map","id","gameName","React","createElement","htmlFor","onChange","event","selectedGameId","target","value","console","log","game","key","LandingPage","inputGameName","setGameName","inputPlayerName","setPlayerName","useRef","gameList","current","type","placeholder","e","onClick","async","includes","alert","playerID","localStorage","getItem","push","setItem","newGameRef","newGameID","set","players","playerName","life","counter","then","catch","error","message","PrincipalPlayer","setLife","setCounter","changeLife","amount","className","incrementCounter","App","gameID","setGameID","setPlayers","dbRef","get","child","exists","values","item","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a38ad2d1.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from '../firebaseConfig'; \r\n\r\nfunction GameForm( { onGameSelect } ) {\r\n  const [games, setGames] = useState([]);\r\n // const [currentGame, setGameID] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n    \r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameArray = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        setGames(gameArray);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleGameSelection = (event) => {\r\n    const selectedGameId = event.target.value;\r\n    console.log(\"Juego seleccionado con ID:\", selectedGameId);\r\n    onGameSelect(selectedGameId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <label htmlFor=\"gameSelect\">Elige un juego ya creado:</label>\r\n        <select id=\"gameSelect\" onChange={handleGameSelection}>\r\n          {games.map((game) => (\r\n            <option key={game.id} value={game.id}>\r\n              {game.gameName} \r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameForm;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ref, push, set, onValue, update } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\nimport GameForm from './GameForm';\r\n\r\nfunction LandingPage({ onGameSelect }) {\r\n  const [inputGameName, setGameName] = useState('');\r\n  const [inputPlayerName, setPlayerName] = useState('');\r\n  const [games, setGames] = useState([]);\r\n  const gameArray = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n\r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameList = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        gameArray.current = gameList;\r\n        setGames(gameList);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const createGame = async () => {\r\n    const namesArray = gameArray.current.map(game => game.gameName);\r\n\r\n    if (namesArray.includes(inputGameName)) {\r\n      return alert(\"Error: partida ya existente MAMERTO\");\r\n    } else {\r\n      const playerID = localStorage.getItem('playerID') || push(ref(db, 'games')).key; \r\n      localStorage.setItem('playerID', playerID); \r\n      \r\n      const newGameRef = push(ref(db, 'games'));\r\n      const newGameID = newGameRef.key;\r\n\r\n      \r\n      set(newGameRef, { \r\n        gameName: inputGameName,\r\n        players: {\r\n          [playerID]: {  \r\n            playerName: inputPlayerName,\r\n            life: 40,\r\n            counter: 0,\r\n          },\r\n        },\r\n      })\r\n      .then(() => {\r\n        alert(\"Partida creada\");\r\n        onGameSelect(newGameID); \r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error: \" + error.message);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Únete a una partida o crea una nueva</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nombre de jugador\"\r\n        value={inputPlayerName}\r\n        onChange={(e) => setPlayerName(e.target.value)}\r\n      />\r\n      <GameForm onGameSelect={onGameSelect} />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Crear partida\"\r\n        value={inputGameName}\r\n        onChange={(e) => setGameName(e.target.value)}\r\n      />\r\n      <button onClick={createGame}>Crear partida</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { useState } from 'react';\r\n\r\nconst PrincipalPlayer = () => {\r\n\r\n  const [life, setLife] = useState(40); \r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const changeLife = (amount) => {\r\n    setLife(life + amount);\r\n  };\r\n\r\n  const incrementCounter = () => {\r\n    setCounter(counter + 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>PrincipalPlayer</h2> \r\n      <p>Vida: {life}</p>\r\n      <p>Counter: {counter}</p>\r\n      <ul className=\"lifeButtons\">\r\n        <li><button onClick={() => changeLife(1)}>+1</button></li>\r\n        <li><button onClick={() => changeLife(-1)}>-1</button></li>\r\n        <li><button onClick={() => changeLife(5)}>+5</button></li>\r\n        <li><button onClick={() => changeLife(-5)}>-5</button></li>\r\n      </ul>\r\n      <button className=\"counterButton\" onClick={incrementCounter}>Counter</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrincipalPlayer;","import React, { useState, useEffect } from 'react';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\n//import { db } from './firebaseConfig';\r\n//import Usuario from './Usuario';\r\n//import Oponente from './Oponente';\r\nimport LandingPage from './Componets/LandingPage';\r\nimport PrincipalPlayer from './Componets/PrincipalPlayer';\r\n//import GameForm from './Componets/GameForm';\r\n\r\nfunction App() {\r\n  const [gameName, setGameName] = useState('');\r\n  const [gameID, setGameID] = useState('');\r\n  const [players, setPlayers] = useState([]);\r\n\r\n  const handleSetGameID = (id) => {\r\n    setGameID(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameID) {\r\n      const dbRef = ref(getDatabase());\r\n\r\n\r\n      get(child(dbRef, `games/${gameID}`))\r\n        .then((snapshot) => {\r\n          if (snapshot.exists()) {\r\n            const data = snapshot.val();\r\n            setGameName(data.gameName); // Establece el nombre del juego\r\n            \r\n            // Verificar si `players` existe en los datos antes de usar `Object.values`\r\n            if (data.players) {\r\n              setPlayers(Object.values(data.players)); // Establece los jugadores\r\n            } else {\r\n              setPlayers([]); // Si no hay jugadores, establece un array vacío\r\n            }\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }, [gameID]);\r\n\r\n  return (\r\n    <div>\r\n      <LandingPage onGameSelect={handleSetGameID} />\r\n      <h2>Partida: {gameName}</h2>\r\n      <PrincipalPlayer/>\r\n      <ul>\r\n        {players.map((item, index) => (\r\n          <li key={index}>\r\n            {item.playerName}: {item.life}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}