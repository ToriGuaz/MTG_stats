{"version":3,"sources":["firebaseConfig.js","Componets/LandingPage.jsx","Componets/PrincipalPlayer.jsx","Componets/Opponent.jsx","Componets/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","LandingPage","_ref","onGameSelect","inputGameName","setGameName","useState","inputPlayerName","setPlayerName","games","setGames","gameArray","useRef","useEffect","gamesRef","ref","onValue","snapshot","data","val","gameList","Object","keys","map","id","gameName","current","savedPlayerName","localStorage","getItem","removePlayerFromPreviousGame","previousGameID","playerID","playerRef","remove","then","console","log","catch","error","React","createElement","className","type","placeholder","value","onChange","e","target","htmlFor","gameID","alert","push","key","setItem","gameRef","set","playerName","life","counter","handleGameSelect","game","onClick","createGame","namesArray","includes","newGameRef","newGameID","players","message","PrincipalPlayer","setLife","setCounter","isNameSet","setIsNameSet","changeLife","newLife","update","unsubscribe","undefined","incrementCounter","newCounter","Opponent","opponentID","lifeCount","setlifeCount","opponentName","setOpponentName","warn","lifeCountRef","Game","setPlayers","dbRef","get","child","exists","principalPlayerID","filter","App","setGameID","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.585dc243.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ref, push, set, onValue, remove } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\n\r\n\r\nfunction LandingPage({ onGameSelect }) {\r\n  const [inputGameName, setGameName] = useState('');\r\n  const [inputPlayerName, setPlayerName] = useState('');\r\n  const [games, setGames] = useState([]);\r\n  const gameArray = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n\r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameList = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        gameArray.current = gameList;\r\n        setGames(gameList);\r\n      }\r\n    });\r\n    \r\n    const savedPlayerName = localStorage.getItem('playerName');\r\n    if (savedPlayerName) setPlayerName(savedPlayerName);\r\n    \r\n  }, []);\r\n\r\n  const removePlayerFromPreviousGame = () => {\r\n    const previousGameID = localStorage.getItem('gameID');\r\n    const playerID = localStorage.getItem('playerID');\r\n    \r\n    if (previousGameID && playerID) {\r\n      const playerRef = ref(db, `games/${previousGameID}/players/${playerID}`);\r\n      remove(playerRef)\r\n        .then(() => console.log(\"Jugador eliminado de la partida anterior\"))\r\n        .catch((error) => console.error(\"Error al eliminar jugador:\", error));\r\n    }\r\n  };\r\n\r\n  const handleGameSelect = (gameID) => {\r\n    if (!inputPlayerName) {\r\n      return alert(\"Error: Por favor ingresa un nombre de jugador.\");\r\n    }\r\n    removePlayerFromPreviousGame();\r\n\r\n    const playerID = localStorage.getItem('playerID') || push(ref(db, 'games')).key;\r\n    localStorage.setItem('playerID', playerID);\r\n    localStorage.setItem('playerName', inputPlayerName);\r\n    localStorage.setItem('gameID', gameID);\r\n\r\n    const gameRef = ref(db, `games/${gameID}/players/${playerID}`);\r\n\r\n    set(gameRef, {\r\n      playerName: inputPlayerName,\r\n      life: 40,\r\n      counter: 0,\r\n    })\r\n    .then(() => {\r\n      alert(\"Jugador añadido a la partida existente\");\r\n      onGameSelect(gameID);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error al añadir jugador:\", error);\r\n    });\r\n  };\r\n\r\n  const createGame = () => {\r\n    if (!inputPlayerName) {\r\n      return alert(\"Error: Por favor ingresa un nombre de jugador.\");\r\n    }\r\n    const namesArray = gameArray.current.map(game => game.gameName);\r\n\r\n    if (!inputGameName) {\r\n      return alert(\"Error: Por favor ingresa un nombre de partida.\");\r\n    }\r\n    if (namesArray.includes(inputGameName)) {\r\n      return alert(\"Error: partida ya existente\");\r\n    } else {\r\n      removePlayerFromPreviousGame();\r\n\r\n      const playerID = localStorage.getItem('playerID') || push(ref(db, 'games')).key;\r\n      localStorage.setItem('playerID', playerID);\r\n      localStorage.setItem('playerName', inputPlayerName);\r\n\r\n      const newGameRef = push(ref(db, 'games'));\r\n      const newGameID = newGameRef.key;\r\n      localStorage.setItem('gameID', newGameID);\r\n\r\n      set(newGameRef, {\r\n        gameName: inputGameName,\r\n        players: {\r\n          [playerID]: {\r\n            playerName: inputPlayerName,\r\n            life: 40,\r\n            counter: 0,\r\n          },\r\n        },\r\n      })\r\n      .then(() => {\r\n        alert(\"Partida creada\");\r\n        onGameSelect(newGameID);\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error: \" + error.message);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"landingPage\">\r\n      <p>Únete a una partida o crea una nueva</p>\r\n  \r\n        <input\r\n          className='input'\r\n          type=\"text\"\r\n          placeholder=\"Nombre de jugador\"\r\n          value={inputPlayerName}\r\n          onChange={(e) => setPlayerName(e.target.value)}\r\n        />\r\n\r\n      <div>\r\n        <label htmlFor=\"gameSelect\">Elige un juego ya creado: </label>\r\n        <select className='select' id=\"gameSelect\" onChange={(e) => handleGameSelect(e.target.value)}>\r\n          <option value=\"\">Seleccione una partida</option>\r\n          {games.map((game) => (\r\n            <option  key={game.id} value={game.id}>\r\n              {game.gameName}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <input \r\n        className='input'\r\n        type=\"text\"\r\n        placeholder=\"Crear partida\"\r\n        value={inputGameName}\r\n        onChange={(e) => setGameName(e.target.value)}\r\n      />\r\n      <button onClick={createGame}>Crear partida</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ref, onValue, update } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\n\r\nconst PrincipalPlayer = ({gameID}) => {\r\n  const playerID = localStorage.getItem('playerID') //por ahora solo agarramos del local storage porque las dos ya tenemos guardado nuestro id ahi\r\n  //paso futuro, no asumir que ya esta en local storage el id.\r\n  const playerRef = ref(db, `games/${gameID}/players/${playerID}`);\r\n  const [playerName, setPlayerName] = useState('');\r\n  const [life, setLife] = useState(40); \r\n  const [counter, setCounter] = useState(0);\r\n  const [isNameSet, setIsNameSet] = useState(false);\r\n\r\n  const changeLife = (newLife) => {\r\n    setLife(newLife);\r\n    update(playerRef, { life: newLife });\r\n  };\r\n\r\n  const incrementCounter = (newCounter) => {\r\n    setCounter(newCounter);\r\n    update(playerRef, { counter: newCounter });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onValue(playerRef, (snapshot) => {\r\n      onValue(playerRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data) {\r\n          if(data.playerName !== '' && !isNameSet) {\r\n            setPlayerName(data.playerName);\r\n            setLife(data.life !== undefined ? data.life : 40);\r\n            setCounter(data.counter || 0);\r\n          } else if (data.playerName === ''){\r\n            alert(\"No te podes sumar sin nombre\");\r\n          }\r\n        }\r\n      });\r\n    return () => unsubscribe();\r\n    });\r\n  }, [playerRef, isNameSet]);\r\n\r\n  return (\r\n    <div className='principalPlayer'>\r\n      <div className='infoPP'>\r\n        <h2>{playerName}</h2> \r\n        <p>Vida: {life}</p>\r\n        <p>Counter: {counter}</p>\r\n      </div>\r\n      <ul className=\"lifeButtons\" >\r\n        <li><button onClick={() => changeLife(life - 1)}>-1</button></li>\r\n        <li><button onClick={() => changeLife(life + 1)}>+1</button></li>\r\n        <li><button onClick={() => changeLife(life - 5)}>-5</button></li>\r\n        <li><button onClick={() => changeLife(life + 5)}>+5</button></li>\r\n        <li><button className=\"counterButton\" onClick={() => incrementCounter( counter + 1)}>Counter</button></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrincipalPlayer;","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\n\r\n\r\nconst Opponent = ({ opponentID , gameID }) => {\r\n    const [lifeCount, setlifeCount] = useState(40);\r\n    const [opponentName, setOpponentName] = useState(''); \r\n    const [counter, setCounter] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!opponentID || !gameID) {\r\n            console.warn(\"Missing opponentID or gameID:\", { opponentID, gameID });\r\n            return; \r\n        }\r\n\r\n        const lifeCountRef = ref(db, `games/${gameID}/players/${opponentID}`);\r\n\r\n        onValue(lifeCountRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            if (data) {\r\n                setOpponentName(data.playerName || 'jugador no puso nombre');\r\n                setlifeCount(data.life !== undefined ? data.life : 40);\r\n                setCounter(data.counter || 0);\r\n              } else {\r\n                console.log('no tenes nombre, GIL');\r\n              }\r\n \r\n        });\r\n\r\n    }, [opponentID, gameID]);\r\n\r\n    return (\r\n        <div className=\"oponente\">\r\n            <h2>{opponentName}</h2>\r\n            <p> Vida: {lifeCount}</p>\r\n            <p> Contador: {counter} </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opponent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PrincipalPlayer from './PrincipalPlayer';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\nimport Opponent from './Opponent'\r\n\r\n\r\n\r\nfunction Game( {gameID} ) {\r\n    const [gameName, setGameName] = useState('');\r\n    const [players, setPlayers] = useState([]);    \r\n\r\n    useEffect(() => {\r\n        if (gameID) {\r\n          const dbRef = ref(getDatabase());\r\n    \r\n    \r\n          get(child(dbRef, `games/${gameID}`))\r\n            .then((snapshot) => {\r\n              if (snapshot.exists()) {\r\n                const data = snapshot.val();\r\n                setGameName(data.gameName); \r\n                \r\n                if (data.players) {\r\n                  setPlayers(Object.keys(data.players)); \r\n\r\n                } else {\r\n                  setPlayers([]); \r\n                }\r\n                \r\n              } else {\r\n                console.log(\"No data available\");\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n        }\r\n      }, [gameID]);\r\n\r\n  const principalPlayerID = localStorage.getItem('playerID');\r\n\r\n  return (\r\n    <div className='game'>\r\n        <h2 className='gameName'> Partida: {gameName}</h2>\r\n        <PrincipalPlayer gameID={gameID} />\r\n        <ul className=\"listaDeOponentes\">\r\n            {players\r\n            .filter((playerID) => playerID !== principalPlayerID)\r\n            .map((playerID) => {\r\n            //console.log(\"Rendering Opponent with:\", item);\r\n            return (\r\n                <li  key={playerID}>\r\n                <Opponent opponentID={playerID} gameID={gameID} />\r\n                </li>\r\n            );\r\n            })}\r\n        </ul>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n\r\n/*        <ul>\r\n            {players.map((item, index) => (//ver de hacer esto de forma que se actualice con los cambios.\r\n            <li key={index}>\r\n                {item.playerName}: {item.life} : {item.counter}\r\n            </li>\r\n            ))}\r\n        </ul> */","import React, { useState, useEffect } from 'react';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\nimport LandingPage from './Componets/LandingPage';\r\nimport Game from './Componets/Game';\r\nimport './Styles/app.css';\r\n\r\nfunction App() {\r\n  const [gameID, setGameID] = useState('');\r\n\r\n  const handleSetGameID = (id) => {\r\n    setGameID(id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LandingPage  onGameSelect={handleSetGameID} />\r\n      <Game  gameID={gameID} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}