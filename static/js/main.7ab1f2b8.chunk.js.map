{"version":3,"sources":["firebaseConfig.js","LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","LandingPage","inputGameName","setGameName","useState","inputPlayerName","setPlayerName","games","setGames","React","createElement","type","placeholder","value","onChange","e","target","name","map","game","key","id","gameName","onClick","async","newGameRef","push","ref","set","players","PlayerName","life","counter","then","alert","catch","error","message","App","setPlayers","dbRef","get","child","snapshot","exists","Object","values","val","console","log","createGame","item","index","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kOAIA,MAWMA,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,qDACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAIXC,EAAKC,YAAYX,GC8DRY,MA1Ef,WACE,MAAOC,EAAeC,GAAeC,mBAAS,KACvCC,EAAiBC,GAAiBF,mBAAS,KAC3CG,EAAOC,GAAYJ,mBAAS,IAwCnC,OACEK,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAG,2CACHD,IAAAC,cAAA,SACEC,KAAK,OACLC,YAAY,oBACZC,MAAOR,EACPS,SAAWC,GAAMT,EAAcS,EAAEC,OAAOH,SAE1CJ,IAAAC,cAAA,YACED,IAAAC,cAAA,aAAO,oBACLD,IAAAC,cAAA,UAAQO,KAAK,YACVV,EAAMW,IAAKC,GACVV,IAAAC,cAAA,UAAQU,IAAKD,EAAKE,GAAIR,MAAOM,EAAKE,IAC/BF,EAAKG,SAAS,SAAOH,EAAKE,GAAG,QAKxCZ,IAAAC,cAAA,SAEEC,KAAK,OACLC,YAAY,gBACZC,MAAOX,EACPY,SAAWC,GAAMZ,EAAYY,EAAEC,OAAOH,SAExCJ,IAAAC,cAAA,UAAQa,QA/DQC,UAClB,MAAMC,EAAaC,YAAKC,YAAI5B,EAAI,UACjB0B,EAAWL,IAC1BQ,YAAIH,EAAY,CACdH,SAAUpB,EACV2B,QAAS,CACP,CAACC,WAAYzB,EACX0B,KAAM,GACNC,QAAS,MAEZC,KAAK,KACNC,MAAM,gBAAgBC,MAAOC,IAC3BF,MAAM,UAAYE,EAAMC,aAmDG,mBCpCpBC,MA9Bf,WACE,MAAOhB,EAAUnB,GAAeC,mBAAS,MACzC,IAAKyB,EAASU,GAAcnC,mBAAS,IAErC,MAAMoC,EAAQb,YAAI3B,eAYlB,OAXAyC,YAAIC,YAAMF,EAAO,uCAAuCP,KAAMU,IACxDA,EAASC,SACXL,EAAWM,OAAOC,OAAOH,EAASI,QAElCC,QAAQC,IAAI,uBAEbd,MAAOC,IACRY,QAAQZ,MAAMA,KAKd3B,IAAAC,cAAA,WACED,IAAAC,cAACT,EAAW,CAACiD,WAAa/C,IAC1BM,IAAAC,cAAA,UACGmB,EAAQX,IAAI,CAACiC,EAAMC,IAClB3C,IAAAC,cAAA,MAAIU,IAAKgC,GACND,EAAKrB,WAAW,KAAGqB,EAAKpB,UCjBtBsB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,KAAKuB,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,MCADQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHzD,IAAAC,cAACD,IAAM0D,WAAU,KACf1D,IAAAC,cAAC4B,EAAG,QAORe,M","file":"static/js/main.7ab1f2b8.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useState, useEffect } from 'react';\r\nimport { getDatabase, ref, get, child, push, set, onValue } from 'firebase/database';\r\nimport { db } from './firebaseConfig';\r\n\r\nfunction LandingPage() {\r\n  const [inputGameName, setGameName] = useState('');\r\n  const [inputPlayerName, setPlayerName] = useState('');\r\n  const [games, setGames] = useState([]);\r\n\r\n\r\n  const createGame  = async () => {\r\n    const newGameRef = push(ref(db, 'games'));\r\n    const gameId = newGameRef.key;\r\n    set(newGameRef, { \r\n      gameName: inputGameName,\r\n      players: [\r\n        {PlayerName: inputPlayerName,\r\n          life: 40,\r\n          counter: 0\r\n        }]\r\n    }).then(() => {\r\n      alert(\"data saved\")}).catch((error) => {\r\n        alert(\"Error: \" + error.message);\r\n      })\r\n  }\r\n\r\n  function GameForm() {\r\n    const [games, setGames] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      const gamesRef = ref(db, 'games');\r\n      \r\n      onValue(gamesRef, (snapshot) => {\r\n        const data = snapshot.val();\r\n        if (data) {\r\n          const gameArray = Object.keys(data).map((id) => ({\r\n            id,\r\n            gameName: data[id].gameName,\r\n          }));\r\n          setGames(gameArray);\r\n        }\r\n      });\r\n    }, []);\r\n  }\r\n    \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <p>Únete a una partida o crea una nueva</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nombre de jugador\"\r\n        value={inputPlayerName}\r\n        onChange={(e) => setPlayerName(e.target.value)}\r\n      />\r\n      <form>\r\n        <label>unirse a partida</label>\r\n          <select name=\"partidas\">\r\n            {games.map((game) => (\r\n              <option key={game.id} value={game.id}>\r\n                {game.gameName} (ID: {game.id})\r\n              </option>\r\n            ))}\r\n            </select>\r\n      </form>\r\n      <input\r\n        //crear partida nueva\r\n        type=\"text\"\r\n        placeholder=\"crear partida\"\r\n        value={inputGameName}\r\n        onChange={(e) => setGameName(e.target.value)}\r\n      />\r\n      <button onClick={createGame}>Crear partida</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState } from 'react';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\n//import { db } from './firebaseConfig';\r\n//import Usuario from './Usuario';\r\n//import Oponente from './Oponente';\r\nimport LandingPage from './LandingPage';\r\n\r\nfunction App() {\r\n  const [gameName, setGameName] = useState(null);\r\n  let [players, setPlayers] = useState([]);\r\n\r\n  const dbRef = ref(getDatabase());\r\n  get(child(dbRef, `games/-OAuFYUnII3Uv0SvvIlH/players`)).then((snapshot) => {\r\n    if (snapshot.exists()) {\r\n      setPlayers(Object.values(snapshot.val()));\r\n    } else {\r\n      console.log(\"No data available\");\r\n    }\r\n  }).catch((error) => {\r\n    console.error(error);\r\n  });\r\n\r\n\r\n  return (\r\n    <div >\r\n      <LandingPage createGame={ setGameName }/>\r\n      <ul>\r\n        {players.map((item, index) => (\r\n          <li key={index}>\r\n            {item.PlayerName}: {item.life} \r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}