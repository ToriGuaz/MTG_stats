{"version":3,"sources":["firebaseConfig.js","GameForm.jsx","LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","GameForm","_ref","onGameSelect","games","setGames","useState","useEffect","gamesRef","ref","onValue","snapshot","data","val","gameArray","Object","keys","map","id","gameName","React","createElement","htmlFor","onChange","event","selectedGameId","target","value","console","log","game","key","LandingPage","inputGameName","setGameName","inputPlayerName","setPlayerName","type","placeholder","e","onClick","async","newGameRef","push","set","players","PlayerName","life","counter","then","alert","catch","error","message","App","gameID","setGameID","setPlayers","dbRef","get","child","exists","values","item","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dee2b845.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from './firebaseConfig'; // Asegúrate de que db esté correctamente importado\r\n\r\nfunction GameForm( { onGameSelect } ) {\r\n  const [games, setGames] = useState([]);\r\n // const [currentGame, setGameID] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n    \r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameArray = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        setGames(gameArray);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleGameSelection = (event) => {\r\n    const selectedGameId = event.target.value;\r\n    console.log(\"Juego seleccionado con ID:\", selectedGameId);\r\n    // Aquí puedes manejar la lógica para el juego seleccionado\r\n    onGameSelect(selectedGameId);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Seleccionar Juego</h1>\r\n      <form>\r\n        <label htmlFor=\"gameSelect\">Elige un juego:</label>\r\n        <select id=\"gameSelect\" onChange={handleGameSelection}>\r\n          <option value=\"\">-- Selecciona un juego --</option>\r\n          {games.map((game) => (\r\n            <option key={game.id} value={game.id}>\r\n              {game.gameName} \r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameForm;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getDatabase, ref, get, child, push, set, onValue } from 'firebase/database';\r\nimport { db } from './firebaseConfig';\r\nimport GameForm from './GameForm';\r\n\r\nfunction LandingPage({ onGameSelect }) {\r\n  const [inputGameName, setGameName] = useState('');\r\n  const [inputPlayerName, setPlayerName] = useState('');\r\n  const [games, setGames] = useState([]);\r\n\r\n\r\n  const createGame  = async () => {\r\n    const newGameRef = push(ref(db, 'games'));\r\n    const gameId = newGameRef.key;\r\n    set(newGameRef, { \r\n      gameName: inputGameName,\r\n      players: [\r\n        {PlayerName: inputPlayerName,\r\n          life: 40,\r\n          counter: 0\r\n        }]\r\n    }).then(() => {\r\n      alert(\"data saved\")}).catch((error) => {\r\n        alert(\"Error: \" + error.message);\r\n      })\r\n  }    \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <p>Únete a una partida o crea una nueva</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nombre de jugador\"\r\n        value={inputPlayerName}\r\n        onChange={(e) => setPlayerName(e.target.value)}\r\n      />\r\n      <GameForm onGameSelect={onGameSelect} />\r\n      <input\r\n        //crear partida nueva\r\n        type=\"text\"\r\n        placeholder=\"crear partida\"\r\n        value={inputGameName}\r\n        onChange={(e) => setGameName(e.target.value)}\r\n      />\r\n      <button onClick={createGame}>Crear partida</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\n//import { db } from './firebaseConfig';\r\n//import Usuario from './Usuario';\r\n//import Oponente from './Oponente';\r\nimport LandingPage from './LandingPage';\r\nimport GameForm from './GameForm';\r\n\r\nfunction App() {\r\n  const [gameName, setGameName] = useState(null);\r\n  const [gameID, setGameID] = useState([]);\r\n  let [players, setPlayers] = useState([]);\r\n\r\n  const handleSetGameID = (id) => {\r\n    setGameID(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (gameID) {\r\n      const dbRef = ref(getDatabase());\r\n      get(child(dbRef, `games/${gameID}/players`))\r\n        .then((snapshot) => {\r\n          if (snapshot.exists()) {\r\n            setPlayers(Object.values(snapshot.val()));\r\n          } else {\r\n            console.log(\"No data available\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    }\r\n  }, [gameID]);\r\n\r\n\r\n  return (\r\n    <div >\r\n      <LandingPage onGameSelect={handleSetGameID} />\r\n      <ul>\r\n        {players.map((item, index) => (\r\n          <li key={index}>\r\n            {item.PlayerName}: {item.life} \r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}