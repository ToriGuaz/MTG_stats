{"version":3,"sources":["firebaseConfig.js","Componets/GameForm.jsx","Componets/LandingPage.jsx","Componets/PrincipalPlayer.jsx","Componets/Opponent.jsx","Componets/Game.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","GameForm","_ref","onGameSelect","games","setGames","useState","useEffect","gamesRef","ref","onValue","snapshot","data","val","gameArray","Object","keys","map","id","gameName","React","createElement","htmlFor","onChange","event","selectedGameId","target","value","playerID","localStorage","getItem","game","key","LandingPage","inputGameName","setGameName","inputPlayerName","setPlayerName","useRef","gameList","current","type","placeholder","e","handleGameSelect","gameID","gameRef","exists","set","playerName","life","counter","then","alert","catch","error","console","onClick","async","includes","push","setItem","newGameRef","newGameID","players","message","PrincipalPlayer","playerRef","setLife","setCounter","changeLife","newLife","update","log","className","incrementCounter","newCounter","Opponent","opponentID","lifeCount","setlifeCount","opponentName","setOpponentName","warn","lifeCountRef","Game","setPlayers","dbRef","get","child","App","setGameID","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.58d6543b.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from '../firebaseConfig'; \r\n\r\n\r\nfunction GameForm( { onGameSelect } ) {\r\n  const [games, setGames] = useState([]);\r\n // const [currentGame, setGameID] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n    \r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameArray = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        setGames(gameArray);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleGameSelection = (event) => {\r\n    const selectedGameId = event.target.value;\r\n    const playerID = localStorage.getItem('playerID'); \r\n    onGameSelect(selectedGameId, playerID);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <label htmlFor=\"gameSelect\">Elige un juego ya creado:</label>\r\n        <select id=\"gameSelect\" onChange={handleGameSelection}>\r\n          {games.map((game) => (\r\n            <option key={game.id} value={game.id}>\r\n              {game.gameName} \r\n            </option>\r\n          ))}\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameForm;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { ref, push, set, onValue, update } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\nimport GameForm from './GameForm';\r\n\r\nfunction LandingPage({ onGameSelect }) {\r\n  const [inputGameName, setGameName] = useState('');\r\n  const [inputPlayerName, setPlayerName] = useState('');\r\n  const [games, setGames] = useState([]);\r\n  const gameArray = useRef([]);\r\n\r\n  useEffect(() => {\r\n    const gamesRef = ref(db, 'games');\r\n\r\n    onValue(gamesRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        const gameList = Object.keys(data).map((id) => ({\r\n          id,\r\n          gameName: data[id].gameName,\r\n        }));\r\n        gameArray.current = gameList;\r\n        setGames(gameList);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const handleGameSelect = (gameID, playerID) => {\r\n    const gameRef = ref(db, `games/${gameID}/players/${playerID}`);\r\n\r\n    onValue(gameRef, (snapshot) => {\r\n        if (!snapshot.exists()) {\r\n            set(gameRef, {\r\n                playerName: inputPlayerName,\r\n                life: 40,\r\n                counter: 0,\r\n            })\r\n            .then(() => {\r\n                alert(\"Jugador añadido a la partida existente\");\r\n            })\r\n            .catch((error) => {\r\n                console.error(\"Error al añadir jugador:\", error);\r\n            });\r\n        } else {\r\n            onGameSelect(gameID);\r\n        }\r\n    });\r\n  };\r\n\r\n  const createGame = async () => {\r\n    const namesArray = gameArray.current.map(game => game.gameName);\r\n\r\n    if (namesArray.includes(inputGameName)) {\r\n      return alert(\"Error: partida ya existente MAMERTO\");\r\n    } else {\r\n      const playerID = localStorage.getItem('playerID') || push(ref(db, 'games')).key; \r\n      localStorage.setItem('playerID', playerID); \r\n      \r\n      const newGameRef = push(ref(db, 'games'));\r\n      const newGameID = newGameRef.key;\r\n\r\n      \r\n      set(newGameRef, { \r\n        gameName: inputGameName,\r\n        players: {\r\n          [playerID]: {  \r\n            playerName: inputPlayerName,\r\n            life: 40,\r\n            counter: 0,\r\n          },\r\n        },\r\n      })\r\n      .then(() => {\r\n        alert(\"Partida creada\");\r\n        onGameSelect(newGameID); \r\n      })\r\n      .catch((error) => {\r\n        alert(\"Error: \" + error.message);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Únete a una partida o crea una nueva</p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nombre de jugador\"\r\n        value={inputPlayerName}\r\n        onChange={(e) => setPlayerName(e.target.value)}\r\n      />\r\n      <GameForm onGameSelect={handleGameSelect} />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Crear partida\"\r\n        value={inputGameName}\r\n        onChange={(e) => setGameName(e.target.value)}\r\n      />\r\n      <button onClick={createGame}>Crear partida</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ref, onValue, update } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\n\r\nconst PrincipalPlayer = ({gameID}) => {\r\n  const playerID = localStorage.getItem('playerID') //por ahora solo agarramos del local storage porque las dos ya tenemos guardado nuestro id ahi\r\n  //paso futuro, no asumir que ya esta en local storage el id.\r\n  const playerRef = ref(db, `games/${gameID}/players/${playerID}`);\r\n  const [playerName, setPlayerName] = useState('');\r\n\r\n  const [life, setLife] = useState(40); \r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const changeLife = (newLife) => {\r\n    setLife(newLife);\r\n    update(playerRef, { life: newLife });\r\n  };\r\n\r\n  const incrementCounter = (newCounter) => {\r\n    setCounter(newCounter);\r\n    update(playerRef, { counter: newCounter });\r\n  };\r\n  useEffect(() => {\r\n    onValue(playerRef, (snapshot) => {\r\n      const data = snapshot.val();\r\n      if (data) {\r\n        setPlayerName(data.playerName || '');\r\n        setLife(data.life || 40);\r\n        setCounter(data.counter || 0);\r\n      } else {\r\n        console.log('no tenes nombre, GIL');\r\n      }\r\n    });\r\n  }, [playerRef]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>{playerName}</h2> \r\n      <p>Vida: {life}</p>\r\n      <p>Counter: {counter}</p>\r\n      <ul className=\"lifeButtons\">\r\n        <li><button onClick={() => changeLife(life + 1)}>+1</button></li>\r\n        <li><button onClick={() => changeLife(life - 1)}>-1</button></li>\r\n        <li><button onClick={() => changeLife(life + 5)}>+5</button></li>\r\n        <li><button onClick={() => changeLife(life - 5)}>-5</button></li>\r\n      </ul>\r\n      <button className=\"counterButton\" onClick={() => incrementCounter( counter + 1)}>Counter</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PrincipalPlayer;","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from '../firebaseConfig';\r\n\r\n\r\nconst Opponent = ({ opponentID , gameID }) => {\r\n    const [lifeCount, setlifeCount] = useState(40);\r\n    const [opponentName, setOpponentName] = useState(''); \r\n    const [counter, setCounter] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!opponentID || !gameID) {\r\n            console.warn(\"Missing opponentID or gameID:\", { opponentID, gameID });\r\n            return; \r\n        }\r\n\r\n        const lifeCountRef = ref(db, `games/${gameID}/players/${opponentID}`);\r\n\r\n        onValue(lifeCountRef, (snapshot) => {\r\n            const data = snapshot.val();\r\n            console.log(\"data dentro del onvalue: \", data)\r\n            if (data) {\r\n                setOpponentName(data.playerName || 'SIN OPONENTES');\r\n                setlifeCount(data.life || 40);\r\n                setCounter(data.counter || 0);\r\n              } else {\r\n                console.log('no tenes nombre, GIL');\r\n              }\r\n\r\n              console.log(\"data despues de la asignacion: \", data)\r\n \r\n        });\r\n\r\n    }, [opponentID, gameID]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"oponente\">\r\n            <h2>{opponentName}</h2>\r\n            <p> Vida: {lifeCount}</p>\r\n            <p> Contador: {counter} </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opponent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PrincipalPlayer from './PrincipalPlayer';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\nimport Opponent from './Opponent'\r\n\r\n\r\n\r\nfunction Game( {gameID} ) {\r\n    const [gameName, setGameName] = useState('');\r\n    const [players, setPlayers] = useState([]);    \r\n\r\n    useEffect(() => {\r\n        if (gameID) {\r\n          const dbRef = ref(getDatabase());\r\n    \r\n    \r\n          get(child(dbRef, `games/${gameID}`))\r\n            .then((snapshot) => {\r\n              if (snapshot.exists()) {\r\n                const data = snapshot.val();\r\n                setGameName(data.gameName); \r\n                \r\n                if (data.players) {\r\n                  setPlayers(Object.keys(data.players)); // Establece los jugadores\r\n                  console.log(\"lista de jugadores dentro de useEffect :\" , players);\r\n\r\n                } else {\r\n                  setPlayers([]); // Si no hay jugadores, establece un array vacío\r\n                }\r\n                \r\n              } else {\r\n                console.log(\"No data available\");\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n        }\r\n      }, [gameID]);\r\n\r\n      console.log(\"lista de jugadores fuera de useEffect :\" , players);\r\n\r\n  return (\r\n    <div>\r\n        <h2>Partida: {gameName}</h2>\r\n        <PrincipalPlayer gameID={gameID} />\r\n        <ul>\r\n            {players.map((playerID) => {\r\n            //console.log(\"Rendering Opponent with:\", item);\r\n            return (\r\n                <li key={playerID}>\r\n                <Opponent opponentID={playerID} gameID={gameID} />\r\n                </li>\r\n            );\r\n            })}\r\n        </ul>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n\r\n/*        <ul>\r\n            {players.map((item, index) => (//ver de hacer esto de forma que se actualice con los cambios.\r\n            <li key={index}>\r\n                {item.playerName}: {item.life} : {item.counter}\r\n            </li>\r\n            ))}\r\n        </ul> */","import React, { useState, useEffect } from 'react';\r\nimport { ref, get, getDatabase, child } from 'firebase/database';\r\nimport LandingPage from './Componets/LandingPage';\r\nimport Game from './Componets/Game';\r\nimport './Styles/app.css';\r\n\r\nfunction App() {\r\n  const [gameID, setGameID] = useState('');\r\n\r\n  const handleSetGameID = (id) => {\r\n    setGameID(id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <LandingPage  onGameSelect={handleSetGameID} />\r\n      <Game  gameID={gameID} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}