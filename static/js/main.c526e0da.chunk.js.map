{"version":3,"sources":["firebaseConfig.js","Usuario.jsx","Oponente.jsx","LandingPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","Usuario","_ref","gameId","nombreJugador","localStorage","getItem","vida","setVida","useState","useEffect","jugadorRef","ref","onValue","snapshot","val","actualizarVida","nuevaVida","set","React","createElement","className","onClick","Oponente","opponentID","vidaRef","unsubscribe","LandingPage","setGameID","inputGameID","setInputGameID","playerName","setPlayerName","type","placeholder","value","onChange","e","target","onJoinGame","setItem","newGameRef","push","newGameID","key","update","players","id","alert","App","gameID","opponents","setOpponents","userID","handleSetGameID","gameRef","playerRef","playerList","Object","values","filter","remove","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c526e0da.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase, ref, set, push, onValue, remove, update } from \"firebase/database\";\r\n\r\n// Configuración de Firebase\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBTzfDF8Hqxob52odaaoyUmTOhbu54jbIY\",\r\n  authDomain: \"mtgstats-864da.firebaseapp.com\",\r\n  databaseURL: \"https://mtgstats-864da-default-rtdb.firebaseio.com\",\r\n  projectId: \"mtgstats-864da\",\r\n  storageBucket: \"mtgstats-864da.appspot.com\",\r\n  messagingSenderId: \"68211953531\",\r\n  appId: \"1:68211953531:web:3619c6cc482a2bfeeb77de\",\r\n  measurementId: \"G-78HCZP9LD6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\n\r\nexport { db, ref, set, push, onValue, remove, update };","import React, { useState, useEffect } from 'react';\r\nimport { db } from './firebaseConfig';\r\nimport { ref, set, onValue } from 'firebase/database';\r\n\r\nconst Usuario = ({ gameId }) => {\r\n  const nombreJugador = localStorage.getItem('nombreJugador');\r\n  const [vida, setVida] = useState(40);\r\n\r\n  useEffect(() => {\r\n    const jugadorRef = ref(db, `games/${gameId}/jugadores/${nombreJugador}/vida`);\r\n    onValue(jugadorRef, (snapshot) => {\r\n      setVida(snapshot.val() || 40);\r\n    });\r\n  }, [gameId, nombreJugador]);\r\n\r\n  const actualizarVida = (nuevaVida) => {\r\n    setVida(nuevaVida);\r\n    const jugadorRef = ref(db, `games/${gameId}/jugadores/${nombreJugador}/vida`);\r\n    set(jugadorRef, nuevaVida);\r\n  };\r\n\r\n  return (\r\n    <div className=\"contenedorUsuario\">\r\n      <h1>{nombreJugador}</h1>\r\n      <h2>Vida: {vida}</h2>\r\n      <button onClick={() => actualizarVida(vida + 1)}>+1</button>\r\n      <button onClick={() => actualizarVida(vida - 1)}>-1</button>\r\n      <button onClick={() => actualizarVida(vida + 5)}>+5</button>\r\n      <button onClick={() => actualizarVida(vida - 5)}>-5</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Usuario;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ref, onValue } from 'firebase/database';\r\nimport { db } from './firebaseConfig';\r\n\r\nconst Oponente = ({ opponentID }) => {\r\n    const [vida, setVida] = useState(40);\r\n\r\n    useEffect(() => {\r\n        if (!opponentID) return; \r\n\r\n        const vidaRef = ref(db, `users/${opponentID}/vida`);\r\n        const unsubscribe = onValue(vidaRef, (snapshot) => {\r\n            setVida(snapshot.val() || 40); // Mantiene el valor inicial si no hay datos en la DB\r\n        });\r\n\r\n        // Cleanup listener al desmontar\r\n        return () => unsubscribe();\r\n    }, [opponentID]);\r\n\r\n    if (!opponentID) return null; // Evita renderizar si no hay opponentID válido\r\n\r\n    return (\r\n        <div className=\"oponente\">\r\n            <h2>Oponente</h2>\r\n            <p>Vida: {vida}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Oponente;\r\n","import React, { useState } from 'react';\r\nimport { ref, push, update, onValue } from 'firebase/database';\r\nimport { db } from './firebaseConfig';\r\n\r\nconst LandingPage = ({ setGameID }) => {\r\n  const [inputGameID, setInputGameID] = useState('');\r\n  const [playerName, setPlayerName] = useState('');\r\n\r\n  const handleGameIDChange = (e) => {\r\n    setInputGameID(e.target.value);\r\n  };\r\n\r\n  const handlePlayerNameChange = (e) => {\r\n    setPlayerName(e.target.value);\r\n  };\r\n\r\n  const onJoinGame = () => {\r\n    if (!playerName) {\r\n      alert('Por favor, ingresa un nombre.');\r\n      return;\r\n    }\r\n\r\n    if (inputGameID) {\r\n      // Unirse a una partida existente\r\n      setGameID(inputGameID);\r\n      localStorage.setItem('userID', playerName);\r\n    } else {\r\n      // Crear una nueva partida\r\n      const newGameRef = push(ref(db, 'games'));\r\n      const newGameID = newGameRef.key;\r\n\r\n      // Inicializa la partida con el jugador actual\r\n      update(newGameRef, { \r\n        players: { \r\n          [playerName]: { id: playerName }\r\n        }\r\n      });\r\n\r\n      setGameID(newGameID);\r\n      localStorage.setItem('userID', playerName);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Únete a una partida o crea una nueva</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nombre de jugador\"\r\n        value={playerName}\r\n        onChange={handlePlayerNameChange}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"ID de partida (opcional)\"\r\n        value={inputGameID}\r\n        onChange={handleGameIDChange}\r\n      />\r\n      <button onClick={onJoinGame}>Ingresar a la partida</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ref, push, update, onValue, remove } from 'firebase/database';\r\nimport { db } from './firebaseConfig';\r\nimport Usuario from './Usuario';\r\nimport Oponente from './Oponente';\r\nimport LandingPage from './LandingPage';\r\n\r\nfunction App() {\r\n  const [gameID, setGameID] = useState(null);\r\n  const [opponents, setOpponents] = useState([]);\r\n  const userID = localStorage.getItem('userID');\r\n\r\n  // Función para establecer el ID de la partida desde la LandingPage\r\n  const handleSetGameID = (id) => {\r\n    setGameID(id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!gameID) return;\r\n\r\n    const gameRef = ref(db, `games/${gameID}/players`);\r\n\r\n    // Agregar jugador a la partida usando `update` en lugar de `set`\r\n    const playerRef = push(gameRef);\r\n    update(playerRef, { id: userID });\r\n\r\n    // Escuchar cambios en los jugadores de la partida\r\n    onValue(gameRef, (snapshot) => {\r\n      const players = snapshot.val();\r\n      const playerList = players ? Object.values(players) : [];\r\n      setOpponents(playerList.filter(id => id !== userID));\r\n    });\r\n\r\n    // Eliminar jugador al desconectarse\r\n    return () => {\r\n      remove(playerRef);\r\n    };\r\n  }, [gameID, userID]);\r\n\r\n  // Condicional para mostrar `LandingPage` si no hay `gameID`\r\n  if (!gameID) {\r\n    return <LandingPage setGameID={handleSetGameID} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Usuario userID={userID} />\r\n      {opponents.map(opponentID => (\r\n        <Oponente key={opponentID} opponentID={opponentID} />\r\n      ))}\r\n      <button onClick={() => setGameID(null)}>Volver a la landing</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}